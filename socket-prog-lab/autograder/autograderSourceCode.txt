kernoops  1732  0.0  0.0  56984   416 ?        Ss   12:34   0:00 /usr/sbin/kerneloops --test
ajd12342 11884  0.0  0.0  20544  3644 pts/4    T    20:24   0:00 ./test-sp.sh.x -c #!/bin/bash  START_PORT=2000 CL_RUNDIR_BASE=/tmp/submissions file[1]="1.txt" file[2]="2.txt" file[3]="3.pdf" file[4]="4.jpg" file[5]="5.jpg" file[6]="6.jpg"  file2[1]="1.txt" file2[2]="2.pdf" file2[3]="3.txt" file2[4]="4.txt" file2[5]="5.jpg" file2[6]="6.txt" file2[7]="7.txt"  function find_next_free_port() {     port=$1     while true     do ?netstat -an | grep tcp | grep ":$port" > /dev/null ?res=$? ?if [ $res -ne 0 ]; then ?    echo $port ?    break; ?fi ?let port=$port+1 ?if [ $port -ge 65535 ]; then ?    echo "Ran out of ports, resetting, sleeing for 5 sec!" 1>&2 ?    sleep 5 ?    port=$START_PORT ?fi     done }  function transfer_files() {     R=$1     cp -ra compile.sh kill_after_TOSLEEP.sh test-sp.sh timed.sh submissions/$R/     cp -ra test-files/* submissions/$R/     rsync -aru submissions/$R /tmp/submissions/ } # End transfer_files()  function test_phase1() {     R=$1     echo "############## Testing Phase1 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     if [ -x "./SimpleEmailClientPhase1" ]; then ?# Run client with wrong args: 0.5 ?pushd "$CL_RUNDIR" >/dev/null ?password_file="passwd.txt" ?correct_username="user1" ?correct_password="pass1" ?incorrect_username="user200" ?incorrect_password="pass2" ?echo "----------------------------------------------------------" ?echo "Part A: Running client with no args" ?./timed.sh ./SimpleEmailClientPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run client with wrong server port: 0.5 ?let WRONG_PORT=$next_port ?echo "----------------------------------------------------------" ?echo "Part B: Running client with wrong port $WRONG_PORT" ?./timed.sh ./SimpleEmailClientPhase1 "$REMOTE:$WRONG_PORT" $correct_username $correct_password ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?popd >/dev/null      else ?echo "No executable file ./SimpleEmailClientPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      if [ -x "./SimpleEmailServerPhase1" ]; then ?# Run server with wrong args: 0.5 ?echo "----------------------------------------------------------" ?echo "Part C: Running server with no args" ?./timed.sh ./SimpleEmailServerPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part C: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run server on already bound python port: 0.5 ?echo "----------------------------------------------------------" ?echo "Part D: Running server on already bound python port $PYTHON_PORT" ?./timed.sh ./SimpleEmailServerPhase1 "$PYTHON_PORT" "$password_file" ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part D: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Password File not readable: 0.5 ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?password_file_wrong="password_wrong.csv" ?echo "----------------------------------------------------------" ?echo "Part E: Running server with wrong password file" ?./timed.sh ./SimpleEmailServerPhase1 "$next_port" "$password_file_wrong" ?res=$? ?if [ "$res" -eq 3 ]; then ?    marks=0.34 ?else ?    marks=0 ?fi ?echo "Part E: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"      else ?echo "No executable file ./SimpleEmailServerPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      numTests=4     if [ ! -x ./SimpleEmailClientPhase1 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase1 ]; then ?numTests=0     fi ?echo "----------------------------------------------------------"      # Test file transfers     for s in `seq 1 1`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?## Correct Username and password : 2 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $correct_password > actual-output-client1-1.txt ?popd >/dev/null ?sleep 1 ?echo "Part F: Checking output with correct password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-1.txt $CL_RUNDIR/actual-output-client1-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part F: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-1.txt actual-output-server1-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?# echo $next_port     ?# echo $difference     ?marks=0 ?fi ?echo "Part F: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------"   ?## Correct Username and incorrect password : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $incorrect_password > actual-output-client1-2.txt ?popd >/dev/null ?sleep 1 ?echo "Part G: Checking output with incorrect password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-2.txt $CL_RUNDIR/actual-output-client1-2.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part G: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-2.txt actual-output-server1-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?echo "Part G: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------" ?## Incorrect Username : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $incorrect_username $incorrect_password > actual-output-client1-3.txt ?popd >/dev/null ?sleep 1 ?echo "Part H: Checking output with incorrect username" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-3.txt $CL_RUNDIR/actual-output-client1-3.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part H: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-3.txt actual-output-server1-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?marks_str="$marks_str+$marks"  ?echo "Part H: Server marks=$marks"     done      cp -ra $CL_RUNDIR/actual-output-client1-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE1_MARKS=$marks_str=$marks"      echo "############## Done Phase1 $R ##########################"  } # End test_phase1  function test_phase2() {     R=$1     echo "############## Testing Phase2 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     numTests=3     if [ ! -x ./SimpleEmailClientPhase2 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase2 ]; then ?numTests=0     fi  ?password_file="passwd.txt" ?user_database="userdb" ?incorrect_user_database="incorrect_userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2"  ?username_folder_absent="user1000" ?password_folder_absent="pass1000"      # Running the server with incorrect user database     echo "Part A: Running the server with incorrect user database"     let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?./SimpleEmailServerPhase2 $next_port $password_file $incorrect_user_database ?res=$? ?if [ "$res" -eq 4 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with one client ?echo "Part B: Running the server with one client" ?next_port=$(find_next_free_port $next_port) ?(./SimpleEmailServerPhase2 $next_port $password_file $user_database > actual-output-server2-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-client-output.py expected-output-client2-1.txt $CL_RUNDIR/actual-output-client2-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1?     else     ?marks=0 ?fi ?echo "Part B: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server2-1.txt actual-output-server2-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part B: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with the client folder absent ?echo "Part C: Running the server with the client folder absent" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-2.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username_folder_absent $password_folder_absent > actual-output-client2-2.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-2.txt actual-output-server2-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part C: marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with two successive clients ?echo "Part D: Running the server with two successive clients" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-3.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-3-1.txt ?echo "h" > actual-output-client2-3-2.txt ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username2 $password2 > actual-output-client2-3-2.txt ?popd >/dev/null ?sleep 2 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-3.txt actual-output-server2-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Server marks=$marks" ?marks_str="$marks_str+$marks"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./ ? ?difference=$(python check-client-output.py expected-output-client2-3-2.txt actual-output-client2-3-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?exit 0     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Client marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE2_MARKS=$marks_str=$marks"      echo "############## Done Phase2 $R ##########################"  } # End test_phase2  function test_phase3() {     R=$1     echo "############## Testing Phase3 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder="transfer_folder" ?incorrect_file_requested="7" ?incorrect_list_format="2,3:4"      # Running the server with a client that sends incorrect file information ?echo "Part A: Running the server with a client that sends incorrect file information" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-1.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_file_requested > actual-output-client3-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?difference=$(python check-client-output.py expected-output-client3-1.txt $CL_RUNDIR/actual-output-client3-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server3-1.txt actual-output-server3-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ? ?# Running the server with client input not parsing to a list of numbers ?echo "Part B: Running the server with client input not parsing to a list of numbers" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-2.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_list_format > actual-output-client3-2.txt ?res=$? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$res" -eq 3 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ?# Running the server and client to check single file transfer ?echo "Part C: Running the server and client to check single file transfer" ?marks_c=0     for s in `seq 1 5`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-3-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $s >client-out-phase3-3-$s.txt ?cli_md5=$(md5sum "${transfer_folder}/${file[$s]}" | awk '{print $1}') ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?# marks_str="$marks_str+$marks" ?marks_c=$marks_c+$marks ?# echo "Part C$s: marks=$marks"     done     marks=$(echo $marks_c | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"     # Running the server and client to check list of files transfer ?echo "Part D: Running the server and client to check list of files transfer" ?marks_d=0     for s in `seq 1 2`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-4-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username2 $password2 $transfer_folder "$s,$((s+1)),$((s+2)),$((s+3)),$((s+4))" > client-out-phase3-4-$s.txt ?for r in `seq 0 4` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder}/${file2[$s+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.2 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?marks_d=$marks_d+$marks ?# echo "Part D$s: marks=$marks" ?done? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3     done     marks=$(echo $marks_d | bc) ?marks_str="$marks_str+$marks" ?echo "Part D: marks=$marks"     echo "----------------------------------------------------------"  ?cp -ra $CL_RUNDIR/actual-output-client3-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE3_MARKS=$marks_str=$marks"      echo "############## Done Phase3 $R ##########################"  } # End test_phase3    function test_phase4() { ?R=$1     echo "############## Testing Phase4 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder1="transfer_folder1" ?transfer_folder2="transfer_folder2"   ?# Running the server and client to check single file transfer ?echo "Part A: Running 2 clients with single file transfer" ?marks_c=0 ?s1=4 ?s2=3  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 2 >client-out-phase4-1.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 3 >client-out-phase4-2.txt &) ? ?sleep 10  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part A: marks=$marks"      echo "----------------------------------------------------------"      # Running the server and clients to check multiple file transfer ?echo "Part B: Running 2 clients with multiple file transfer" ?marks_c=0 ?s1=2 ?s2=1  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 "$s1,$((s1+1)),$((s1+2)),$((s1+3))" 2 > client-out-phase4-3.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 "$s2,$((s2+1)),$((s2+2)),$((s2+3))" 3 > client-out-phase4-4.txt &) ?? ?sleep 15  ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done? ?marks_b=$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?marks_b=$marks_b+$marks_p      marks=$(echo $marks_b | bc) ?marks_str="$marks_str+$marks" ?echo "Part B: marks=$marks"     echo "----------------------------------------------------------"      # Running the server and client to check big file transfer ?echo "Part C: Running 2 clients with single big file transfer" ?marks_c=0 ?s1=6 ?s2=7  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 1 >client-out-phase4-5.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 1 >client-out-phase4-6.txt &) ? ?sleep 20  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=2.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"  ?# cp -ra $CL_RUNDIR/actual-output-client4-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE4_MARKS=$marks_str=$marks"      echo "############## Done Phase4 $R ##########################"  } # End test_phase4   # Main begins here   if [[ $# -eq 0 ]] ; then     echo 'Usage: ./test-sp.sh.x <roll-number>'     exit 0 fi R=$1  PYTHON_PORT=$(find_next_free_port $START_PORT) echo "Running python on $PYTHON_PORT" python -m SimpleHTTPServer $PYTHON_PORT & python_pid=$!  let next_port=$PYTHON_PORT+1 next_port=$(find_next_free_port $next_port)    transfer_files $R ./compile.sh $R pushd submissions/$R >/dev/null  for p in `seq 1 4` do # if [ "$p" -gt 1 ]; then #     kill -TERM $python_pid # fi REMOTE="127.0.0.1" #test_phase$p $R </dev/null #>phase$p-out.txt 2>phase$p-out.err # test_phase$p $R </dev/null 2>phase$p-out.err test_phase$p $R </dev/null done popd >/dev/null  kill -TERM $python_pid  ./test-sp.sh.x 170070005
ajd12342 20633  0.0  0.0  21060  4240 pts/4    T    21:47   0:00 ./test-sp.sh.x -c #!/bin/bash  START_PORT=2000 CL_RUNDIR_BASE=/tmp/submissions file[1]="1.txt" file[2]="2.txt" file[3]="3.pdf" file[4]="4.jpg" file[5]="5.jpg" file[6]="6.jpg"  file2[1]="1.txt" file2[2]="2.pdf" file2[3]="3.txt" file2[4]="4.txt" file2[5]="5.jpg" file2[6]="6.txt" file2[7]="7.txt"  function find_next_free_port() {     port=$1     while true     do ?netstat -an | grep tcp | grep ":$port" > /dev/null ?res=$? ?if [ $res -ne 0 ]; then ?    echo $port ?    break; ?fi ?let port=$port+1 ?if [ $port -ge 65535 ]; then ?    echo "Ran out of ports, resetting, sleeing for 5 sec!" 1>&2 ?    sleep 5 ?    port=$START_PORT ?fi     done }  function transfer_files() {     R=$1     cp -ra compile.sh kill_after_TOSLEEP.sh test-sp.sh timed.sh submissions/$R/     cp -ra test-files/* submissions/$R/     rsync -aru submissions/$R /tmp/submissions/ } # End transfer_files()  function test_phase1() {     R=$1     echo "############## Testing Phase1 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     if [ -x "./SimpleEmailClientPhase1" ]; then ?# Run client with wrong args: 0.5 ?pushd "$CL_RUNDIR" >/dev/null ?password_file="passwd.txt" ?correct_username="user1" ?correct_password="pass1" ?incorrect_username="user200" ?incorrect_password="pass2" ?echo "----------------------------------------------------------" ?echo "Part A: Running client with no args" ?./timed.sh ./SimpleEmailClientPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run client with wrong server port: 0.5 ?let WRONG_PORT=$next_port ?echo "----------------------------------------------------------" ?echo "Part B: Running client with wrong port $WRONG_PORT" ?./timed.sh ./SimpleEmailClientPhase1 "$REMOTE:$WRONG_PORT" $correct_username $correct_password ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?popd >/dev/null      else ?echo "No executable file ./SimpleEmailClientPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      if [ -x "./SimpleEmailServerPhase1" ]; then ?# Run server with wrong args: 0.5 ?echo "----------------------------------------------------------" ?echo "Part C: Running server with no args" ?./timed.sh ./SimpleEmailServerPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part C: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run server on already bound python port: 0.5 ?echo "----------------------------------------------------------" ?echo "Part D: Running server on already bound python port $PYTHON_PORT" ?./timed.sh ./SimpleEmailServerPhase1 "$PYTHON_PORT" "$password_file" ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part D: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Password File not readable: 0.5 ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?password_file_wrong="password_wrong.csv" ?echo "----------------------------------------------------------" ?echo "Part E: Running server with wrong password file" ?./timed.sh ./SimpleEmailServerPhase1 "$next_port" "$password_file_wrong" ?res=$? ?if [ "$res" -eq 3 ]; then ?    marks=0.34 ?else ?    marks=0 ?fi ?echo "Part E: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"      else ?echo "No executable file ./SimpleEmailServerPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      numTests=4     if [ ! -x ./SimpleEmailClientPhase1 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase1 ]; then ?numTests=0     fi ?echo "----------------------------------------------------------"      # Test file transfers     for s in `seq 1 1`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?## Correct Username and password : 2 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $correct_password > actual-output-client1-1.txt ?popd >/dev/null ?sleep 1 ?echo "Part F: Checking output with correct password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-1.txt $CL_RUNDIR/actual-output-client1-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part F: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-1.txt actual-output-server1-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?# echo $next_port     ?# echo $difference     ?marks=0 ?fi ?echo "Part F: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------"   ?## Correct Username and incorrect password : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $incorrect_password > actual-output-client1-2.txt ?popd >/dev/null ?sleep 1 ?echo "Part G: Checking output with incorrect password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-2.txt $CL_RUNDIR/actual-output-client1-2.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part G: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-2.txt actual-output-server1-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?echo "Part G: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------" ?## Incorrect Username : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $incorrect_username $incorrect_password > actual-output-client1-3.txt ?popd >/dev/null ?sleep 1 ?echo "Part H: Checking output with incorrect username" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-3.txt $CL_RUNDIR/actual-output-client1-3.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part H: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-3.txt actual-output-server1-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?marks_str="$marks_str+$marks"  ?echo "Part H: Server marks=$marks"     done      cp -ra $CL_RUNDIR/actual-output-client1-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE1_MARKS=$marks_str=$marks"      echo "############## Done Phase1 $R ##########################"  } # End test_phase1  function test_phase2() {     R=$1     echo "############## Testing Phase2 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     numTests=3     if [ ! -x ./SimpleEmailClientPhase2 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase2 ]; then ?numTests=0     fi  ?password_file="passwd.txt" ?user_database="userdb" ?incorrect_user_database="incorrect_userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2"  ?username_folder_absent="user1000" ?password_folder_absent="pass1000"      # Running the server with incorrect user database     echo "Part A: Running the server with incorrect user database"     let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?./SimpleEmailServerPhase2 $next_port $password_file $incorrect_user_database ?res=$? ?if [ "$res" -eq 4 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with one client ?echo "Part B: Running the server with one client" ?next_port=$(find_next_free_port $next_port) ?(./SimpleEmailServerPhase2 $next_port $password_file $user_database > actual-output-server2-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-client-output.py expected-output-client2-1.txt $CL_RUNDIR/actual-output-client2-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1?     else     ?marks=0 ?fi ?echo "Part B: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server2-1.txt actual-output-server2-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part B: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with the client folder absent ?echo "Part C: Running the server with the client folder absent" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-2.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username_folder_absent $password_folder_absent > actual-output-client2-2.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-2.txt actual-output-server2-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part C: marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with two successive clients ?echo "Part D: Running the server with two successive clients" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-3.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-3-1.txt ?echo "h" > actual-output-client2-3-2.txt ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username2 $password2 > actual-output-client2-3-2.txt ?popd >/dev/null ?sleep 2 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-3.txt actual-output-server2-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Server marks=$marks" ?marks_str="$marks_str+$marks"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./ ? ?difference=$(python check-client-output.py expected-output-client2-3-2.txt actual-output-client2-3-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?exit 0     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Client marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE2_MARKS=$marks_str=$marks"      echo "############## Done Phase2 $R ##########################"  } # End test_phase2  function test_phase3() {     R=$1     echo "############## Testing Phase3 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder="transfer_folder" ?incorrect_file_requested="7" ?incorrect_list_format="2,3:4"      # Running the server with a client that sends incorrect file information ?echo "Part A: Running the server with a client that sends incorrect file information" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-1.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_file_requested > actual-output-client3-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?difference=$(python check-client-output.py expected-output-client3-1.txt $CL_RUNDIR/actual-output-client3-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server3-1.txt actual-output-server3-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ? ?# Running the server with client input not parsing to a list of numbers ?echo "Part B: Running the server with client input not parsing to a list of numbers" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-2.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_list_format > actual-output-client3-2.txt ?res=$? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$res" -eq 3 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ?# Running the server and client to check single file transfer ?echo "Part C: Running the server and client to check single file transfer" ?marks_c=0     for s in `seq 1 5`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-3-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $s >client-out-phase3-3-$s.txt ?cli_md5=$(md5sum "${transfer_folder}/${file[$s]}" | awk '{print $1}') ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?# marks_str="$marks_str+$marks" ?marks_c=$marks_c+$marks ?# echo "Part C$s: marks=$marks"     done     marks=$(echo $marks_c | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"     # Running the server and client to check list of files transfer ?echo "Part D: Running the server and client to check list of files transfer" ?marks_d=0     for s in `seq 1 2`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-4-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username2 $password2 $transfer_folder "$s,$((s+1)),$((s+2)),$((s+3)),$((s+4))" > client-out-phase3-4-$s.txt ?for r in `seq 0 4` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder}/${file2[$s+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.2 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?marks_d=$marks_d+$marks ?# echo "Part D$s: marks=$marks" ?done? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3     done     marks=$(echo $marks_d | bc) ?marks_str="$marks_str+$marks" ?echo "Part D: marks=$marks"     echo "----------------------------------------------------------"  ?cp -ra $CL_RUNDIR/actual-output-client3-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE3_MARKS=$marks_str=$marks"      echo "############## Done Phase3 $R ##########################"  } # End test_phase3    function test_phase4() { ?R=$1     echo "############## Testing Phase4 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder1="transfer_folder1" ?transfer_folder2="transfer_folder2"   ?# Running the server and client to check single file transfer ?echo "Part A: Running 2 clients with single file transfer" ?marks_c=0 ?s1=4 ?s2=3  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 2 >client-out-phase4-1.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 3 >client-out-phase4-2.txt &) ? ?sleep 10  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part A: marks=$marks"      echo "----------------------------------------------------------"      # Running the server and clients to check multiple file transfer ?echo "Part B: Running 2 clients with multiple file transfer" ?marks_c=0 ?s1=2 ?s2=1  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 "$s1,$((s1+1)),$((s1+2)),$((s1+3))" 2 > client-out-phase4-3.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 "$s2,$((s2+1)),$((s2+2)),$((s2+3))" 3 > client-out-phase4-4.txt &) ?? ?sleep 15  ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done? ?marks_b=$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?marks_b=$marks_b+$marks_p      marks=$(echo $marks_b | bc) ?marks_str="$marks_str+$marks" ?echo "Part B: marks=$marks"     echo "----------------------------------------------------------"      # Running the server and client to check big file transfer ?echo "Part C: Running 2 clients with single big file transfer" ?marks_c=0 ?s1=6 ?s2=7  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 1 >client-out-phase4-5.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 1 >client-out-phase4-6.txt &) ? ?sleep 20  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=2.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"  ?# cp -ra $CL_RUNDIR/actual-output-client4-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE4_MARKS=$marks_str=$marks"      echo "############## Done Phase4 $R ##########################"  } # End test_phase4   # Main begins here   if [[ $# -eq 0 ]] ; then     echo 'Usage: ./test-sp.sh.x <roll-number>'     exit 0 fi R=$1  PYTHON_PORT=$(find_next_free_port $START_PORT) echo "Running python on $PYTHON_PORT" python -m SimpleHTTPServer $PYTHON_PORT & python_pid=$!  let next_port=$PYTHON_PORT+1 next_port=$(find_next_free_port $next_port)    transfer_files $R ./compile.sh $R pushd submissions/$R >/dev/null  for p in `seq 1 4` do # if [ "$p" -gt 1 ]; then #     kill -TERM $python_pid # fi REMOTE="127.0.0.1" #test_phase$p $R </dev/null #>phase$p-out.txt 2>phase$p-out.err # test_phase$p $R </dev/null 2>phase$p-out.err test_phase$p $R </dev/null done popd >/dev/null  kill -TERM $python_pid  ./test-sp.sh.x 170070005
ajd12342 23115  0.0  0.0  21060  4340 pts/4    T    22:21   0:00 ./test-sp.sh.x -c #!/bin/bash  START_PORT=2000 CL_RUNDIR_BASE=/tmp/submissions file[1]="1.txt" file[2]="2.txt" file[3]="3.pdf" file[4]="4.jpg" file[5]="5.jpg" file[6]="6.jpg"  file2[1]="1.txt" file2[2]="2.pdf" file2[3]="3.txt" file2[4]="4.txt" file2[5]="5.jpg" file2[6]="6.txt" file2[7]="7.txt"  function find_next_free_port() {     port=$1     while true     do ?netstat -an | grep tcp | grep ":$port" > /dev/null ?res=$? ?if [ $res -ne 0 ]; then ?    echo $port ?    break; ?fi ?let port=$port+1 ?if [ $port -ge 65535 ]; then ?    echo "Ran out of ports, resetting, sleeing for 5 sec!" 1>&2 ?    sleep 5 ?    port=$START_PORT ?fi     done }  function transfer_files() {     R=$1     cp -ra compile.sh kill_after_TOSLEEP.sh test-sp.sh timed.sh submissions/$R/     cp -ra test-files/* submissions/$R/     rsync -aru submissions/$R /tmp/submissions/ } # End transfer_files()  function test_phase1() {     R=$1     echo "############## Testing Phase1 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     if [ -x "./SimpleEmailClientPhase1" ]; then ?# Run client with wrong args: 0.5 ?pushd "$CL_RUNDIR" >/dev/null ?password_file="passwd.txt" ?correct_username="user1" ?correct_password="pass1" ?incorrect_username="user200" ?incorrect_password="pass2" ?echo "----------------------------------------------------------" ?echo "Part A: Running client with no args" ?./timed.sh ./SimpleEmailClientPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run client with wrong server port: 0.5 ?let WRONG_PORT=$next_port ?echo "----------------------------------------------------------" ?echo "Part B: Running client with wrong port $WRONG_PORT" ?./timed.sh ./SimpleEmailClientPhase1 "$REMOTE:$WRONG_PORT" $correct_username $correct_password ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?popd >/dev/null      else ?echo "No executable file ./SimpleEmailClientPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      if [ -x "./SimpleEmailServerPhase1" ]; then ?# Run server with wrong args: 0.5 ?echo "----------------------------------------------------------" ?echo "Part C: Running server with no args" ?./timed.sh ./SimpleEmailServerPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part C: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run server on already bound python port: 0.5 ?echo "----------------------------------------------------------" ?echo "Part D: Running server on already bound python port $PYTHON_PORT" ?./timed.sh ./SimpleEmailServerPhase1 "$PYTHON_PORT" "$password_file" ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part D: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Password File not readable: 0.5 ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?password_file_wrong="password_wrong.csv" ?echo "----------------------------------------------------------" ?echo "Part E: Running server with wrong password file" ?./timed.sh ./SimpleEmailServerPhase1 "$next_port" "$password_file_wrong" ?res=$? ?if [ "$res" -eq 3 ]; then ?    marks=0.34 ?else ?    marks=0 ?fi ?echo "Part E: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"      else ?echo "No executable file ./SimpleEmailServerPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      numTests=4     if [ ! -x ./SimpleEmailClientPhase1 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase1 ]; then ?numTests=0     fi ?echo "----------------------------------------------------------"      # Test file transfers     for s in `seq 1 1`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?## Correct Username and password : 2 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $correct_password > actual-output-client1-1.txt ?popd >/dev/null ?sleep 1 ?echo "Part F: Checking output with correct password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-1.txt $CL_RUNDIR/actual-output-client1-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part F: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-1.txt actual-output-server1-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?# echo $next_port     ?# echo $difference     ?marks=0 ?fi ?echo "Part F: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------"   ?## Correct Username and incorrect password : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $incorrect_password > actual-output-client1-2.txt ?popd >/dev/null ?sleep 1 ?echo "Part G: Checking output with incorrect password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-2.txt $CL_RUNDIR/actual-output-client1-2.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part G: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-2.txt actual-output-server1-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?echo "Part G: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------" ?## Incorrect Username : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $incorrect_username $incorrect_password > actual-output-client1-3.txt ?popd >/dev/null ?sleep 1 ?echo "Part H: Checking output with incorrect username" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-3.txt $CL_RUNDIR/actual-output-client1-3.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part H: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-3.txt actual-output-server1-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?marks_str="$marks_str+$marks"  ?echo "Part H: Server marks=$marks"     done      cp -ra $CL_RUNDIR/actual-output-client1-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE1_MARKS=$marks_str=$marks"      echo "############## Done Phase1 $R ##########################"  } # End test_phase1  function test_phase2() {     R=$1     echo "############## Testing Phase2 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     numTests=3     if [ ! -x ./SimpleEmailClientPhase2 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase2 ]; then ?numTests=0     fi  ?password_file="passwd.txt" ?user_database="userdb" ?incorrect_user_database="incorrect_userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2"  ?username_folder_absent="user1000" ?password_folder_absent="pass1000"      # Running the server with incorrect user database     echo "Part A: Running the server with incorrect user database"     let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?./SimpleEmailServerPhase2 $next_port $password_file $incorrect_user_database ?res=$? ?if [ "$res" -eq 4 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with one client ?echo "Part B: Running the server with one client" ?next_port=$(find_next_free_port $next_port) ?(./SimpleEmailServerPhase2 $next_port $password_file $user_database > actual-output-server2-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-client-output.py expected-output-client2-1.txt $CL_RUNDIR/actual-output-client2-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1?     else     ?marks=0 ?fi ?echo "Part B: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server2-1.txt actual-output-server2-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part B: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with the client folder absent ?echo "Part C: Running the server with the client folder absent" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-2.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username_folder_absent $password_folder_absent > actual-output-client2-2.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-2.txt actual-output-server2-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part C: marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with two successive clients ?echo "Part D: Running the server with two successive clients" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-3.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-3-1.txt ?echo "h" > actual-output-client2-3-2.txt ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username2 $password2 > actual-output-client2-3-2.txt ?popd >/dev/null ?sleep 2 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-3.txt actual-output-server2-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Server marks=$marks" ?marks_str="$marks_str+$marks"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./ ? ?difference=$(python check-client-output.py expected-output-client2-3-2.txt actual-output-client2-3-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?exit 0     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Client marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE2_MARKS=$marks_str=$marks"      echo "############## Done Phase2 $R ##########################"  } # End test_phase2  function test_phase3() {     R=$1     echo "############## Testing Phase3 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder="transfer_folder" ?incorrect_file_requested="7" ?incorrect_list_format="2,3:4"      # Running the server with a client that sends incorrect file information ?echo "Part A: Running the server with a client that sends incorrect file information" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-1.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_file_requested > actual-output-client3-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?difference=$(python check-client-output.py expected-output-client3-1.txt $CL_RUNDIR/actual-output-client3-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server3-1.txt actual-output-server3-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ? ?# Running the server with client input not parsing to a list of numbers ?echo "Part B: Running the server with client input not parsing to a list of numbers" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-2.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $incorrect_list_format > actual-output-client3-2.txt ?res=$? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$res" -eq 3 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ?# Running the server and client to check single file transfer ?echo "Part C: Running the server and client to check single file transfer" ?marks_c=0     for s in `seq 1 5`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-3-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $transfer_folder $s >client-out-phase3-3-$s.txt ?cli_md5=$(md5sum "${transfer_folder}/${file[$s]}" | awk '{print $1}') ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?# marks_str="$marks_str+$marks" ?marks_c=$marks_c+$marks ?# echo "Part C$s: marks=$marks"     done     marks=$(echo $marks_c | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"     # Running the server and client to check list of files transfer ?echo "Part D: Running the server and client to check list of files transfer" ?marks_d=0     for s in `seq 1 2`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-4-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username2 $password2 $transfer_folder "$s,$((s+1)),$((s+2)),$((s+3)),$((s+4))" > client-out-phase3-4-$s.txt ?for r in `seq 0 4` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder}/${file2[$s+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.2 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?marks_d=$marks_d+$marks ?# echo "Part D$s: marks=$marks" ?done? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3     done     marks=$(echo $marks_d | bc) ?marks_str="$marks_str+$marks" ?echo "Part D: marks=$marks"     echo "----------------------------------------------------------"  ?cp -ra $CL_RUNDIR/actual-output-client3-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE3_MARKS=$marks_str=$marks"      echo "############## Done Phase3 $R ##########################"  } # End test_phase3    function test_phase4() { ?R=$1     echo "############## Testing Phase4 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder1="transfer_folder1" ?transfer_folder2="transfer_folder2"   ?# Running the server and client to check single file transfer ?echo "Part A: Running 2 clients with single file transfer" ?marks_c=0 ?s1=4 ?s2=3  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 2 >client-out-phase4-1.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 3 >client-out-phase4-2.txt &) ? ?sleep 10  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part A: marks=$marks"      echo "----------------------------------------------------------"      # Running the server and clients to check multiple file transfer ?echo "Part B: Running 2 clients with multiple file transfer" ?marks_c=0 ?s1=2 ?s2=1  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 "$s1,$((s1+1)),$((s1+2)),$((s1+3))" 2 > client-out-phase4-3.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 "$s2,$((s2+1)),$((s2+2)),$((s2+3))" 3 > client-out-phase4-4.txt &) ?? ?sleep 15  ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done? ?marks_b=$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125 ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?marks_b=$marks_b+$marks_p      marks=$(echo $marks_b | bc) ?marks_str="$marks_str+$marks" ?echo "Part B: marks=$marks"     echo "----------------------------------------------------------"      # Running the server and client to check big file transfer ?echo "Part C: Running 2 clients with single big file transfer" ?marks_c=0 ?s1=6 ?s2=7  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $transfer_folder1 $s1 1 >client-out-phase4-5.txt &) ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $transfer_folder2 $s2 1 >client-out-phase4-6.txt &) ? ?sleep 20  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=2.0 ?else ?    marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"  ?# cp -ra $CL_RUNDIR/actual-output-client4-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE4_MARKS=$marks_str=$marks"      echo "############## Done Phase4 $R ##########################"  } # End test_phase4   # Main begins here   if [[ $# -eq 0 ]] ; then     echo 'Usage: ./test-sp.sh.x <roll-number>'     exit 0 fi R=$1  PYTHON_PORT=$(find_next_free_port $START_PORT) echo "Running python on $PYTHON_PORT" python -m SimpleHTTPServer $PYTHON_PORT & python_pid=$!  let next_port=$PYTHON_PORT+1 next_port=$(find_next_free_port $next_port)    transfer_files $R ./compile.sh $R pushd submissions/$R >/dev/null  for p in `seq 1 4` do # if [ "$p" -gt 1 ]; then #     kill -TERM $python_pid # fi REMOTE="127.0.0.1" #test_phase$p $R </dev/null #>phase$p-out.txt 2>phase$p-out.err # test_phase$p $R </dev/null 2>phase$p-out.err test_phase$p $R </dev/null done popd >/dev/null  kill -TERM $python_pid  ./test-sp.sh.x 170070005
ajd12342 28932  0.0  0.0  21168  4368 pts/7    T    22:53   0:00 ./test-sp.sh.x -c #!/bin/bash  START_PORT=2000 CL_RUNDIR_BASE=/tmp/submissions file[1]="1.txt" file[2]="2.txt" file[3]="3.pdf" file[4]="4.jpg" file[5]="5.jpg" file[6]="6.jpg"  file2[1]="1.txt" file2[2]="2.pdf" file2[3]="3.txt" file2[4]="4.txt" file2[5]="5.jpg" file2[6]="6.txt" file2[7]="7.txt"  function find_next_free_port() {     port=$1     while true     do ?netstat -an | grep tcp | grep ":$port" > /dev/null ?res=$? ?if [ $res -ne 0 ]; then ?    echo $port ?    break; ?fi ?let port=$port+1 ?if [ $port -ge 65535 ]; then ?    echo "Ran out of ports, resetting, sleeing for 5 sec!" 1>&2 ?    sleep 5 ?    port=$START_PORT ?fi     done }  function transfer_files() {     R=$1     rm -r /tmp/submissions/$R 2>/dev/null     cp -ra compile.sh kill_after_TOSLEEP.sh test-sp.sh timed.sh submissions/$R/     cp -ra test-files/* submissions/$R/     rsync -ar submissions/$R /tmp/submissions/ } # End transfer_files()  function test_phase1() {     R=$1     echo "############## Testing Phase1 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     if [ -x "./SimpleEmailClientPhase1" ]; then ?# Run client with wrong args: 0.5 ?pushd "$CL_RUNDIR" >/dev/null ?password_file="passwd.txt" ?correct_username="user1" ?correct_password="pass1" ?incorrect_username="user200" ?incorrect_password="pass2" ?echo "----------------------------------------------------------" ?echo "Part A: Running client with no args" ?./timed.sh ./SimpleEmailClientPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run client with wrong server port: 0.5 ?let WRONG_PORT=$next_port ?echo "----------------------------------------------------------" ?echo "Part B: Running client with wrong port $WRONG_PORT" ?./timed.sh ./SimpleEmailClientPhase1 "$REMOTE:$WRONG_PORT" $correct_username $correct_password ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?popd >/dev/null      else ?echo "No executable file ./SimpleEmailClientPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      if [ -x "./SimpleEmailServerPhase1" ]; then ?# Run server with wrong args: 0.5 ?echo "----------------------------------------------------------" ?echo "Part C: Running server with no args" ?./timed.sh ./SimpleEmailServerPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part C: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run server on already bound python port: 0.5 ?echo "----------------------------------------------------------" ?echo "Part D: Running server on already bound python port $PYTHON_PORT" ?./timed.sh ./SimpleEmailServerPhase1 "$PYTHON_PORT" "$password_file" ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part D: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Password File not readable: 0.5 ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?password_file_wrong="password_wrong.csv" ?echo "----------------------------------------------------------" ?echo "Part E: Running server with wrong password file" ?./timed.sh ./SimpleEmailServerPhase1 "$next_port" "$password_file_wrong" ?res=$? ?if [ "$res" -eq 3 ]; then ?    marks=0.34 ?else ?    marks=0 ?fi ?echo "Part E: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"      else ?echo "No executable file ./SimpleEmailServerPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      numTests=4     if [ ! -x ./SimpleEmailClientPhase1 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase1 ]; then ?numTests=0     fi ?echo "----------------------------------------------------------"      # Test file transfers     for s in `seq 1 1`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?## Correct Username and password : 2 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $correct_password > actual-output-client1-1.txt ?popd >/dev/null ?sleep 1 ?echo "Part F: Checking output with correct password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-1.txt $CL_RUNDIR/actual-output-client1-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part F: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-1.txt actual-output-server1-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?# echo $next_port     ?# echo $difference     ?marks=0 ?fi ?echo "Part F: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------"   ?## Correct Username and incorrect password : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $incorrect_password > actual-output-client1-2.txt ?popd >/dev/null ?sleep 1 ?echo "Part G: Checking output with incorrect password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-2.txt $CL_RUNDIR/actual-output-client1-2.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part G: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-2.txt actual-output-server1-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?echo "Part G: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------" ?## Incorrect Username : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $incorrect_username $incorrect_password > actual-output-client1-3.txt ?popd >/dev/null ?sleep 1 ?echo "Part H: Checking output with incorrect username" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-3.txt $CL_RUNDIR/actual-output-client1-3.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part H: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-3.txt actual-output-server1-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?marks_str="$marks_str+$marks"  ?echo "Part H: Server marks=$marks"     done      cp -ra $CL_RUNDIR/actual-output-client1-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE1_MARKS=$marks_str=$marks"      echo "############## Done Phase1 $R ##########################"  } # End test_phase1  function test_phase2() {     R=$1     echo "############## Testing Phase2 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     numTests=3     if [ ! -x ./SimpleEmailClientPhase2 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase2 ]; then ?numTests=0     fi  ?password_file="passwd.txt" ?user_database="userdb" ?incorrect_user_database="incorrect_userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2"  ?username_folder_absent="user1000" ?password_folder_absent="pass1000"      # Running the server with incorrect user database     echo "Part A: Running the server with incorrect user database"     let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?./SimpleEmailServerPhase2 $next_port $password_file $incorrect_user_database ?res=$? ?if [ "$res" -eq 4 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with one client ?echo "Part B: Running the server with one client" ?next_port=$(find_next_free_port $next_port) ?(./SimpleEmailServerPhase2 $next_port $password_file $user_database > actual-output-server2-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-client-output.py expected-output-client2-1.txt $CL_RUNDIR/actual-output-client2-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1?     else     ?marks=0 ?fi ?echo "Part B: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server2-1.txt actual-output-server2-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part B: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with the client folder absent ?echo "Part C: Running the server with the client folder absent" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-2.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username_folder_absent $password_folder_absent > actual-output-client2-2.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-2.txt actual-output-server2-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part C: marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with two successive clients ?echo "Part D: Running the server with two successive clients" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-3.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-3-1.txt ?echo "h" > actual-output-client2-3-2.txt ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username2 $password2 > actual-output-client2-3-2.txt ?popd >/dev/null ?sleep 2 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-3.txt actual-output-server2-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Server marks=$marks" ?marks_str="$marks_str+$marks"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./ ? ?difference=$(python check-client-output.py expected-output-client2-3-2.txt actual-output-client2-3-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?exit 0     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Client marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE2_MARKS=$marks_str=$marks"      echo "############## Done Phase2 $R ##########################"  } # End test_phase2  function test_phase3() {     R=$1     echo "############## Testing Phase3 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder="transfer_folder" ?incorrect_file_requested="17" ?incorrect_list_format="2,3:4"      # Running the server with a client that sends incorrect file information ?echo "Part A: Running the server with a client that sends incorrect file information" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-1.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $incorrect_file_requested $transfer_folder > actual-output-client3-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?difference=$(python check-client-output.py expected-output-client3-1.txt $CL_RUNDIR/actual-output-client3-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server3-1.txt actual-output-server3-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ? ?# Running the server with client input not parsing to a list of numbers ?echo "Part B: Running the server with client input not parsing to a list of numbers" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-2.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $incorrect_list_format $transfer_folder > actual-output-client3-2.txt ?res=$? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$res" -eq 3 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ?# Running the server and client to check single file transfer ?echo "Part C: Running the server and client to check single file transfer" ?marks_c=0     for s in `seq 1 5`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-3-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $s $transfer_folder >client-out-phase3-3-$s.txt ?cli_md5=$(md5sum "${transfer_folder}/${file[$s]}" | awk '{print $1}') ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?# marks_str="$marks_str+$marks" ?marks_c=$marks_c+$marks ?# echo "Part C$s: marks=$marks"     done     marks=$(echo $marks_c | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"     # Running the server and client to check list of files transfer ?echo "Part D: Running the server and client to check list of files transfer" ?marks_d=0     for s in `seq 1 2`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-4-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username2 $password2 "$s,$((s+1)),$((s+2)),$((s+3)),$((s+4))" $transfer_folder > client-out-phase3-4-$s.txt ?for r in `seq 0 4` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder}/${file2[$s+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.2 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?marks_d=$marks_d+$marks ?# echo "Part D$s: marks=$marks" ?done? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3     done     marks=$(echo $marks_d | bc) ?marks_str="$marks_str+$marks" ?echo "Part D: marks=$marks"     echo "----------------------------------------------------------"  ?cp -ra $CL_RUNDIR/actual-output-client3-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE3_MARKS=$marks_str=$marks"      echo "############## Done Phase3 $R ##########################"  } # End test_phase3    function test_phase4() { ?R=$1     echo "############## Testing Phase4 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder1="transfer_folder1" ?transfer_folder2="transfer_folder2"   ?# Running the server and client to check single file transfer ?echo "Part A: Running 2 clients with single file transfer" ?marks_c=0 ?s1=4 ?s2=3  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $s1 $transfer_folder1 6 >client-out-phase4-1.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $s2 $transfer_folder2 2 >client-out-phase4-2.txt &) ? ?sleep 10  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi  ?difference=$(python check-server-output.py expected-output-server4-1.txt actual-output-server4-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=$marks*1     else     ?echo $difference     ?marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part A: marks=$marks"      echo "----------------------------------------------------------"      # Running the server and clients to check multiple file transfer ?echo "Part B: Running 2 clients with multiple file transfers" ?marks_c=0 ?s1=2 ?s2=1  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 "$s1,$((s1+1)),$((s1+2)),$((s1+3))" $transfer_folder1 8 > client-out-phase4-3.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 "$s2,$((s2+1)),$((s2+2)),$((s2+3))" $transfer_folder2 2 > client-out-phase4-4.txt &) ?? ?sleep 20 ?popd >/dev/null ?killall -TERM SimpleEmailServerPhase4 ?marks_p=0  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-2.txt actual-output-server4-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?popd >/dev/null ?# echo "Part D$s: marks=$marks" ?done ?# marks_p=$marks_p*$marks_diff? ?marks_b=$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?sleep 1 ?# marks_p=$marks_p*$marks_diff ?marks_b=$marks_b+$marks_p  ?marks_c=0 ?s1=4 ?s2=5  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 "$s1,$((s1-2)),$((s1-3)),$((s1-1))" $transfer_folder1 2 > client-out-phase4-5.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 "$((s2-3)),$((s2-1)),$s2,$((s2-2))" $transfer_folder2 8 > client-out-phase4-6.txt &) ?? ?sleep 20 ?popd >/dev/null ?killall -TERM SimpleEmailServerPhase4 ?marks_p=0  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-3.txt actual-output-server4-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1-$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1-$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?# marks_p=$marks_p*$marks_diff? ?marks_b=$marks_b+$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2-$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2-$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?sleep 1 ?# marks_p=$marks_p*$marks_diff ?marks_b=$marks_b+$marks_p      marks=$(echo $marks_b | bc) ?marks_str="$marks_str+$marks" ?echo "Part B: marks=$marks"     echo "----------------------------------------------------------"      # Running the server and client to check big file transfer ?echo "Part C: Running 2 clients with single big file transfer" ?marks_c=0 ?s1=6 ?s2=7  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-4.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $s1 $transfer_folder1 3 >client-out-phase4-7.txt &) ?sleep 1 ?(TOSLEEP=30 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $s2 $transfer_folder2 13 >client-out-phase4-8.txt &) ? ?sleep 25  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-4.txt actual-output-server4-4.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi ?marks=$marks*$marks_diff     marks=$(echo $marks | bc)      ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"  ?# cp -ra $CL_RUNDIR/actual-output-client4-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE4_MARKS=$marks_str=$marks"      echo "############## Done Phase4 $R ##########################"  } # End test_phase4   # Main begins here   if [[ $# -eq 0 ]] ; then     echo 'Usage: ./test-sp.sh.x <roll-number>'     exit 0 fi R=$1  PYTHON_PORT=$(find_next_free_port $START_PORT) echo "Running python on $PYTHON_PORT" python -m SimpleHTTPServer $PYTHON_PORT & python_pid=$!  let next_port=$PYTHON_PORT+1 next_port=$(find_next_free_port $next_port)   rm -r /tmp/submissions 2>/dev/null ./compile.sh $R transfer_files $R pushd submissions/$R >/dev/null  for p in `seq 1 4` do # if [ "$p" -gt 1 ]; then #     kill -TERM $python_pid # fi REMOTE="127.0.0.1" #test_phase$p $R </dev/null #>phase$p-out.txt 2>phase$p-out.err # test_phase$p $R </dev/null 2>phase$p-out.err test_phase$p $R </dev/null done popd >/dev/null  kill -TERM $python_pid  ./test-sp.sh.x 170070005
ajd12342 29820  0.0  0.0  21168  4536 pts/7    T    22:57   0:00 ./test-sp.sh.x -c #!/bin/bash  START_PORT=2000 CL_RUNDIR_BASE=/tmp/submissions file[1]="1.txt" file[2]="2.txt" file[3]="3.pdf" file[4]="4.jpg" file[5]="5.jpg" file[6]="6.jpg"  file2[1]="1.txt" file2[2]="2.pdf" file2[3]="3.txt" file2[4]="4.txt" file2[5]="5.jpg" file2[6]="6.txt" file2[7]="7.txt"  function find_next_free_port() {     port=$1     while true     do ?netstat -an | grep tcp | grep ":$port" > /dev/null ?res=$? ?if [ $res -ne 0 ]; then ?    echo $port ?    break; ?fi ?let port=$port+1 ?if [ $port -ge 65535 ]; then ?    echo "Ran out of ports, resetting, sleeing for 5 sec!" 1>&2 ?    sleep 5 ?    port=$START_PORT ?fi     done }  function transfer_files() {     R=$1     rm -r /tmp/submissions/$R 2>/dev/null     cp -ra compile.sh kill_after_TOSLEEP.sh test-sp.sh timed.sh submissions/$R/     cp -ra test-files/* submissions/$R/     rsync -ar submissions/$R /tmp/submissions/ } # End transfer_files()  function test_phase1() {     R=$1     echo "############## Testing Phase1 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     if [ -x "./SimpleEmailClientPhase1" ]; then ?# Run client with wrong args: 0.5 ?pushd "$CL_RUNDIR" >/dev/null ?password_file="passwd.txt" ?correct_username="user1" ?correct_password="pass1" ?incorrect_username="user200" ?incorrect_password="pass2" ?echo "----------------------------------------------------------" ?echo "Part A: Running client with no args" ?./timed.sh ./SimpleEmailClientPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run client with wrong server port: 0.5 ?let WRONG_PORT=$next_port ?echo "----------------------------------------------------------" ?echo "Part B: Running client with wrong port $WRONG_PORT" ?./timed.sh ./SimpleEmailClientPhase1 "$REMOTE:$WRONG_PORT" $correct_username $correct_password ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?popd >/dev/null      else ?echo "No executable file ./SimpleEmailClientPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      if [ -x "./SimpleEmailServerPhase1" ]; then ?# Run server with wrong args: 0.5 ?echo "----------------------------------------------------------" ?echo "Part C: Running server with no args" ?./timed.sh ./SimpleEmailServerPhase1 ?res=$? ?if [ "$res" -eq 1 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part C: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Run server on already bound python port: 0.5 ?echo "----------------------------------------------------------" ?echo "Part D: Running server on already bound python port $PYTHON_PORT" ?./timed.sh ./SimpleEmailServerPhase1 "$PYTHON_PORT" "$password_file" ?res=$? ?if [ "$res" -eq 2 ]; then ?    marks=0.33 ?else ?    marks=0 ?fi ?echo "Part D: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"  ?# Password File not readable: 0.5 ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?password_file_wrong="password_wrong.csv" ?echo "----------------------------------------------------------" ?echo "Part E: Running server with wrong password file" ?./timed.sh ./SimpleEmailServerPhase1 "$next_port" "$password_file_wrong" ?res=$? ?if [ "$res" -eq 3 ]; then ?    marks=0.34 ?else ?    marks=0 ?fi ?echo "Part E: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks"      else ?echo "No executable file ./SimpleEmailServerPhase1" ?marks=0 ?marks_str="$marks_str+$marks"     fi      numTests=4     if [ ! -x ./SimpleEmailClientPhase1 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase1 ]; then ?numTests=0     fi ?echo "----------------------------------------------------------"      # Test file transfers     for s in `seq 1 1`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?## Correct Username and password : 2 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $correct_password > actual-output-client1-1.txt ?popd >/dev/null ?sleep 1 ?echo "Part F: Checking output with correct password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-1.txt $CL_RUNDIR/actual-output-client1-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part F: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-1.txt actual-output-server1-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?# echo $next_port     ?# echo $difference     ?marks=0 ?fi ?echo "Part F: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------"   ?## Correct Username and incorrect password : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $correct_username $incorrect_password > actual-output-client1-2.txt ?popd >/dev/null ?sleep 1 ?echo "Part G: Checking output with incorrect password" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-2.txt $CL_RUNDIR/actual-output-client1-2.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part G: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-2.txt actual-output-server1-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?echo "Part G: Server marks=$marks" ?marks_str="$marks_str+$marks"  ?echo "----------------------------------------------------------" ?## Incorrect Username : 1 ?# echo "Running server at port $next_port" ?(./SimpleEmailServerPhase1 $next_port $password_file > actual-output-server1-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase1 "$REMOTE:$next_port" $incorrect_username $incorrect_password > actual-output-client1-3.txt ?popd >/dev/null ?sleep 1 ?echo "Part H: Checking output with incorrect username" ?# killall -TERM SimpleEmailServerPhase1 ?difference=$(python check-client-output.py expected-output-client1-3.txt $CL_RUNDIR/actual-output-client1-3.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part H: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server1-3.txt actual-output-server1-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $next_port     ?echo $difference     ?marks=0 ?fi ?marks_str="$marks_str+$marks"  ?echo "Part H: Server marks=$marks"     done      cp -ra $CL_RUNDIR/actual-output-client1-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE1_MARKS=$marks_str=$marks"      echo "############## Done Phase1 $R ##########################"  } # End test_phase1  function test_phase2() {     R=$1     echo "############## Testing Phase2 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"     numTests=3     if [ ! -x ./SimpleEmailClientPhase2 ]; then ?numTests=0     fi     if [ ! -x ./SimpleEmailServerPhase2 ]; then ?numTests=0     fi  ?password_file="passwd.txt" ?user_database="userdb" ?incorrect_user_database="incorrect_userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2"  ?username_folder_absent="user1000" ?password_folder_absent="pass1000"      # Running the server with incorrect user database     echo "Part A: Running the server with incorrect user database"     let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?./SimpleEmailServerPhase2 $next_port $password_file $incorrect_user_database ?res=$? ?if [ "$res" -eq 4 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part A: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with one client ?echo "Part B: Running the server with one client" ?next_port=$(find_next_free_port $next_port) ?(./SimpleEmailServerPhase2 $next_port $password_file $user_database > actual-output-server2-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-client-output.py expected-output-client2-1.txt $CL_RUNDIR/actual-output-client2-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=1?     else     ?marks=0 ?fi ?echo "Part B: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server2-1.txt actual-output-server2-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=1     else     ?marks=0 ?fi ?echo "Part B: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with the client folder absent ?echo "Part C: Running the server with the client folder absent" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-2.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username_folder_absent $password_folder_absent > actual-output-client2-2.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-2.txt actual-output-server2-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part C: marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"   ?# Running the server with two successive clients ?echo "Part D: Running the server with two successive clients" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server2-3.txt ./timed.sh ./SimpleEmailServerPhase2 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username1 $password1 > actual-output-client2-3-1.txt ?echo "h" > actual-output-client2-3-2.txt ?./SimpleEmailClientPhase2 "$REMOTE:$next_port" $username2 $password2 > actual-output-client2-3-2.txt ?popd >/dev/null ?sleep 2 ?killall -TERM SimpleEmailServerPhase2 ?difference=$(python check-server-output.py expected-output-server2-3.txt actual-output-server2-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Server marks=$marks" ?marks_str="$marks_str+$marks"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./ ? ?difference=$(python check-client-output.py expected-output-client2-3-2.txt actual-output-client2-3-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?exit 0     ?echo $difference     ?marks=0 ?fi ?echo "Part D: Client marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"      cp -ra $CL_RUNDIR/actual-output-client2-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE2_MARKS=$marks_str=$marks"      echo "############## Done Phase2 $R ##########################"  } # End test_phase2  function test_phase3() {     R=$1     echo "############## Testing Phase3 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder="transfer_folder" ?incorrect_file_requested="17" ?incorrect_list_format="2,3:4"      # Running the server with a client that sends incorrect file information ?echo "Part A: Running the server with a client that sends incorrect file information" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-1.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $incorrect_file_requested $transfer_folder > actual-output-client3-1.txt ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?difference=$(python check-client-output.py expected-output-client3-1.txt $CL_RUNDIR/actual-output-client3-1.txt) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Client marks=$marks" ?marks_str="$marks_str+$marks"  ?difference=$(python check-server-output.py expected-output-server3-1.txt actual-output-server3-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=0.5     else     ?marks=0 ?fi ?echo "Part A: Server marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ? ?# Running the server with client input not parsing to a list of numbers ?echo "Part B: Running the server with client input not parsing to a list of numbers" ?next_port=$(find_next_free_port $next_port) ?STDOUT_REDIR=actual-output-server3-2.txt ./timed.sh ./SimpleEmailServerPhase3 $next_port $password_file $user_database & ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $incorrect_list_format $transfer_folder > actual-output-client3-2.txt ?res=$? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$res" -eq 3 ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?echo "Part B: Exit code $res, marks=$marks" ?marks_str="$marks_str+$marks" ?echo "----------------------------------------------------------"  ?# Running the server and client to check single file transfer ?echo "Part C: Running the server and client to check single file transfer" ?marks_c=0     for s in `seq 1 5`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-3-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username1 $password1 $s $transfer_folder >client-out-phase3-3-$s.txt ?cli_md5=$(md5sum "${transfer_folder}/${file[$s]}" | awk '{print $1}') ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3 ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.5 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?# marks_str="$marks_str+$marks" ?marks_c=$marks_c+$marks ?# echo "Part C$s: marks=$marks"     done     marks=$(echo $marks_c | bc) ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"     # Running the server and client to check list of files transfer ?echo "Part D: Running the server and client to check list of files transfer" ?marks_d=0     for s in `seq 1 2`     do ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase3 $next_port $password_file $user_database > actual-output-server3-4-$s.txt &) ?sleep 1 ?pushd $CL_RUNDIR >/dev/null ?# echo "Running client to $REMOTE:$next_port" ?./timed.sh ./SimpleEmailClientPhase3 "$REMOTE:$next_port" $username2 $password2 "$s,$((s+1)),$((s+2)),$((s+3)),$((s+4))" $transfer_folder > client-out-phase3-4-$s.txt ?for r in `seq 0 4` ?do ?popd >/dev/null ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder}/${file2[$s+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.2 ?else ?    marks=0 ?fi ?# echo "ser_md5=$ser_md5" ?# echo "cli_md5=$cli_md5" ?marks_d=$marks_d+$marks ?# echo "Part D$s: marks=$marks" ?done? ?popd >/dev/null ?sleep 1 ?killall -TERM SimpleEmailServerPhase3     done     marks=$(echo $marks_d | bc) ?marks_str="$marks_str+$marks" ?echo "Part D: marks=$marks"     echo "----------------------------------------------------------"  ?cp -ra $CL_RUNDIR/actual-output-client3-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE3_MARKS=$marks_str=$marks"      echo "############## Done Phase3 $R ##########################"  } # End test_phase3    function test_phase4() { ?R=$1     echo "############## Testing Phase4 $R ##########################"     CL_RUNDIR="$CL_RUNDIR_BASE/$R/"     marks_str="0"      password_file="passwd.txt" ?user_database="userdb" ?username1="user1" ?password1="pass1"  ?username2="user2" ?password2="pass2" ?transfer_folder1="transfer_folder1" ?transfer_folder2="transfer_folder2"   ?# Running the server and client to check single file transfer ?echo "Part A: Running 2 clients with single file transfer" ?marks_c=0 ?s1=4 ?s2=3  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-1.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $s1 $transfer_folder1 6 >client-out-phase4-1.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $s2 $transfer_folder2 2 >client-out-phase4-2.txt &) ? ?sleep 10  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4 ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi  ?difference=$(python check-server-output.py expected-output-server4-1.txt actual-output-server4-1.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks=$marks*1     else     ?echo $difference     ?marks=0 ?fi      marks=$(echo $marks | bc) ?marks_str="$marks_str+$marks" ?echo "Part A: marks=$marks"      echo "----------------------------------------------------------"      # Running the server and clients to check multiple file transfer ?echo "Part B: Running 2 clients with multiple file transfers" ?marks_c=0 ?s1=2 ?s2=1  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-2.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 "$s1,$((s1+1)),$((s1+2)),$((s1+3))" $transfer_folder1 8 > client-out-phase4-3.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 "$s2,$((s2+1)),$((s2+2)),$((s2+3))" $transfer_folder2 2 > client-out-phase4-4.txt &) ?? ?sleep 20 ?popd >/dev/null ?killall -TERM SimpleEmailServerPhase4 ?marks_p=0  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-2.txt actual-output-server4-2.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?marks_p=$marks_p+$marks ?popd >/dev/null ?# echo "Part D$s: marks=$marks" ?done ?# marks_p=$marks_p*$marks_diff? ?marks_b=$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2+$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2+$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?sleep 1 ?# marks_p=$marks_p*$marks_diff ?marks_b=$marks_b+$marks_p  ?marks_c=0 ?s1=4 ?s2=5  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-3.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=10 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 "$s1,$((s1-2)),$((s1-3)),$((s1-1))" $transfer_folder1 2 > client-out-phase4-5.txt &) ?sleep 1 ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 "$((s2-3)),$((s2-1)),$s2,$((s2-2))" $transfer_folder2 8 > client-out-phase4-6.txt &) ?? ?sleep 20 ?popd >/dev/null ?killall -TERM SimpleEmailServerPhase4 ?marks_p=0  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-3.txt actual-output-server4-3.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username1}/${file[$s1-$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder1}/${file[$s1-$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?# marks_p=$marks_p*$marks_diff? ?marks_b=$marks_b+$marks_p ?marks_p=0 ?for r in `seq 0 3` ?do ?ser_md5=$(md5sum "${user_database}/${username2}/${file2[$s2-$r]}" | awk '{print $1}') ?pushd $CL_RUNDIR >/dev/null ?cli_md5=$(md5sum "${transfer_folder2}/${file2[$s2-$r]}" | awk '{print $1}') ?if [ "$ser_md5" == "$cli_md5" ] && [ "$ser_md5" != "" ]; then ?    marks=0.125*$marks_diff ?else ?    marks=0 ?fi ?popd >/dev/null ?marks_p=$marks_p+$marks ?# echo "Part D$s: marks=$marks" ?done ?sleep 1 ?# marks_p=$marks_p*$marks_diff ?marks_b=$marks_b+$marks_p      marks=$(echo $marks_b | bc) ?marks_str="$marks_str+$marks" ?echo "Part B: marks=$marks"     echo "----------------------------------------------------------"      # Running the server and client to check big file transfer ?echo "Part C: Running 2 clients with single big file transfer" ?marks_c=0 ?s1=6 ?s2=7  ?let next_port=$next_port+1 ?next_port=$(find_next_free_port $next_port) ?ser1_md5=$(md5sum "${user_database}/${username1}/${file[$s1]}" | awk '{print $1}') ?ser2_md5=$(md5sum "${user_database}/${username2}/${file2[$s2]}" | awk '{print $1}') ?# echo "Running server at port $next_port file=${file[$s]}" ?(./SimpleEmailServerPhase4 $next_port $password_file $user_database > actual-output-server4-4.txt &) ?sleep 1 ?pushd $CL_RUNDIR>/dev/null ?# echo "Running client to $REMOTE:$next_port"  ?(TOSLEEP=20 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username1 $password1 $s1 $transfer_folder1 3 >client-out-phase4-7.txt &) ?sleep 1 ?(TOSLEEP=30 ./timed.sh ./SimpleEmailClientPhase4 "$REMOTE:$next_port" $username2 $password2 $s2 $transfer_folder2 13 >client-out-phase4-8.txt &) ? ?sleep 25  ?cli1_md5=$(md5sum "${transfer_folder1}/${file[$s1]}" | awk '{print $1}') ?cli2_md5=$(md5sum "${transfer_folder2}/${file2[$s2]}" | awk '{print $1}') ? ?popd >/dev/null ?# sleep 10 ?killall -TERM SimpleEmailServerPhase4  ?marks_diff=0 ?difference=$(python check-server-output.py expected-output-server4-4.txt actual-output-server4-4.txt $next_port) ?if [ "$difference" == "correct" ]  ?then     ?marks_diff=1     else     ?marks_diff=0 ?fi  ?if [ "$ser1_md5" == "$cli1_md5" ] && [ "$ser1_md5" != "" ] && [ "$ser2_md5" == "$cli2_md5" ] && [ "$ser2_md5" != "" ]; then ?    marks=1.0 ?else ?    marks=0 ?fi ?marks=$marks*$marks_diff     marks=$(echo $marks | bc)      ?marks_str="$marks_str+$marks" ?echo "Part C: marks=$marks"      echo "----------------------------------------------------------"  ?# cp -ra $CL_RUNDIR/actual-output-client4-*.txt ./      marks=$(echo $marks_str | bc)     echo "PHASE4_MARKS=$marks_str=$marks"      echo "############## Done Phase4 $R ##########################"  } # End test_phase4   # Main begins here   if [[ $# -eq 0 ]] ; then     echo 'Usage: ./test-sp.sh.x <roll-number>'     exit 0 fi R=$1  PYTHON_PORT=$(find_next_free_port $START_PORT) echo "Running python on $PYTHON_PORT" python -m SimpleHTTPServer $PYTHON_PORT & python_pid=$!  let next_port=$PYTHON_PORT+1 next_port=$(find_next_free_port $next_port)   rm -r /tmp/submissions 2>/dev/null ./compile.sh $R transfer_files $R pushd submissions/$R >/dev/null  for p in `seq 1 4` do # if [ "$p" -gt 1 ]; then #     kill -TERM $python_pid # fi REMOTE="127.0.0.1" #test_phase$p $R </dev/null #>phase$p-out.txt 2>phase$p-out.err # test_phase$p $R </dev/null 2>phase$p-out.err test_phase$p $R </dev/null done popd >/dev/null  kill -TERM $python_pid  ./test-sp.sh.x 170070005
ajd12342 30442  0.0  0.0  21536  1108 pts/7    S+   22:59   0:00 grep --color=auto test
